# @Time : 2021/5/12 22:25 
# @Author : cc
# @File : 数组数字加一.py 
# @Software: PyCharm
'''
给定一个由 整数 组成的 非空 数组所表示的非负整数，在该数的基础上加一。最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。你可以假设除了整数 0 之外，这个整数不会以零开头。
输入：digits = [4,3,2,1]
输出：[4,3,2,2]
解释：输入数组表示数字 4321。
'''
#解题思路：先对数组进行倒序遍历，从末位开始判断，如果末位小于9，则末位加1返回数组，如果末位为9，将这一位换位0，进入下一个循环
#需要考虑特殊情况“999”，解决方法，循环结束后，判断数组首位是不是0，如果是0，则在首位插入1
#话不多说，上代码（目前只想到这种办法，后续想到了再补充）
def plusOne(digits):
    for i in range(len(digits)-1,-1,-1):  #倒序遍历数组，数组最后一位是len()-1,首位是-1，步长是-1
        if digits[i] != 9:
            digits[i] += 1
            break
        else:
            digits[i] = 0
    if digits[0] == 0:
        digits.insert(0,1)
    return digits

dights = [9]
a= plusOne(dights)
print(a)
